"""
공포도가 x인 모험가는 반드시 x명 이상으로 구성한 모험가 그룹에 참여해야 여행을 떠날 수 있음
몇 명의 모험가는 마을에 그대로 있어도 되기 때문에 모든 모험가를 특정한 그룹에 넣을 필요는 없음.
주어진 모험가 정보를 활용해서 최대 몇 개의 모험가 그룹을 만들 수 있는가?

input
5
2 3 1 2 2

expected output
2

'count(현재 그룹에 포함된 모험가의 수)'가 'i(현재 확인하고 있는 공포도)'보다 '>=(크거나 같다면)' 그룹으로 설정하여 모험을 보냄

ex
1회전
i = 1
count = 1

그룹 결성하여 모험 ㄱㄱ why? 공포도가 1인 모험가는 1명 이상 그룹에 속하면 되기 때문
그룹이 결성되었으므로 
result += 1 -> result = 1 이 되어 현재 그룹은 1개이며
공포도 1의 모험가가 그룹을 결성했으므로 count(현재 그룹에 포함된 모험가의 수) = 0 으로 초기화


2회전
i = 2
count = 1

공포도가 2인 모험가는 여행을 떠나려면 그룹에 자신 포함 2명 이상이 되어야 한다. 따라서 다음 턴에 동료가 포함되길 기다려야 함

3회전
i = 2
count = 2

공포도가 2인 모험가가 포함된 그룹의 구성원이 2명 이상이 되었으므로 새로운 그룹을 생성하고 앞선 i = 1의 경우와 마찬가지로 현재 그룹에 포함된 모험가의 수를 초기화함.

4회전, 5회전
현재 탐색 중인 공포도에 현재 그룹에 포함된 모험가 수가 미치지 못하므로 그룹 결성되지 못하고 종료됨.

1회차
공포도 1
현재 모험가 수 1
총 그룹 수 1
2회차
공포도 2
현재 모험가 수 1
3회차
공포도 2
현재 모험가 수 2
총 그룹 수 2
4회차
공포도 2
현재 모험가 수 1
5회차
공포도 3
현재 모험가 수 2
"""


def exampleAnswer():
    n = int(input())
    data = list(map(int, input().split()))
    data.sort()  # [1, 2, 2, 2, 3]

    result = 0
    count = 0

    for i in data:  # 공포도를 낮은 것부터 하나씩 확인하며
        count += 1  # 현재 그룹에 해당 모험가 포함시키기
        if count >= i:  # 현재 그룹에 포함된 모험가의 수가 현재의 공포도 이상이라면, 그룹 결성
            result += 1  # 총 그룹의 수 증가시키기
            count = 0  # 현재 그룹에 포함된 모험가의 수 초기화
    return result


print("exampleAnswer", exampleAnswer())
